/*
 *CSCI 4210 Spring
 *Concert Application
 *Andy Tran, Amanda James, Bill Momah
 */
package ConcertProjectGUI;

//import ConcertProjectGUI.core.Concert;
import ConcertProjectGUI.core.Ticket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author andyt
 */
public class ConcertApplication extends javax.swing.JFrame {

    /**
     * Creates new form ConcertApplication
     */
    public ConcertApplication() {
        initComponents();
        conn = DBConnection.getDBConnection();
        buyButton.setVisible(false);
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ticketPanel = new javax.swing.JLayeredPane();
        concertPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        concertTableList = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        buyButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ticketTableList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 255));

        ticketPanel.setBackground(new java.awt.Color(204, 153, 255));

        concertPanel.setBackground(new java.awt.Color(139, 0, 139));

        concertTableList.setBackground(new java.awt.Color(204, 153, 255));
        concertTableList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "first", "last", "date", "address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        concertTableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                concertTableListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(concertTableList);

        refreshButton.setBackground(new java.awt.Color(128, 0, 128));
        refreshButton.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.setBorderPainted(false);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(147, 112, 219));

        buyButton.setText("Buy Ticket");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel3.setText("Tickets");

        ticketTableList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seat Number", "Ticket Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ticketTableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ticketTableListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(ticketTableList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout concertPanelLayout = new javax.swing.GroupLayout(concertPanel);
        concertPanel.setLayout(concertPanelLayout);
        concertPanelLayout.setHorizontalGroup(
            concertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(concertPanelLayout.createSequentialGroup()
                .addGroup(concertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        concertPanelLayout.setVerticalGroup(
            concertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(concertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        ticketPanel.setLayer(concertPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout ticketPanelLayout = new javax.swing.GroupLayout(ticketPanel);
        ticketPanel.setLayout(ticketPanelLayout);
        ticketPanelLayout.setHorizontalGroup(
            ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(concertPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ticketPanelLayout.setVerticalGroup(
            ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(concertPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ticketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ticketPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    Connection conn;
    Statement state;
    ResultSet result;
    PreparedStatement prepareState;
    String artistFirst,artistLast,date,address;
    int seatNumber,seatPrice,id;
    
    private void updateTable(){
        int a;
        try{
            state = conn.createStatement();
            result = state.executeQuery("SELECT * FROM Concert");
            ResultSetMetaData concertData = result.getMetaData();
            
            a = concertData.getColumnCount();
            DefaultTableModel concertTable = (DefaultTableModel)concertTableList.getModel();
            concertTable.setRowCount(0);
                    
            while(result.next()){
                Vector concertList = new Vector();
                
                for(int i = 1; i < a; i++){
                    concertList.add(result.getInt("id"));
                    concertList.add(result.getString("ArtistFName"));
                    concertList.add(result.getString("ArtistLName"));
                    concertList.add(result.getString("Con_Date").split(" ")[0]);
                    concertList.add(result.getString("Address"));
                }
                concertTable.addRow(concertList);
            }        
                                        
        } catch (SQLException ex){
            Logger.getLogger(ConcertApplication.class.getName()).log(Level.SEVERE, null, ex);
        }    
    }
    
    private void listTickets(){
        //Populate the ticketTable
        int b;
        try {
            String sql = "SELECT * FROM Ticket, Concert WHERE Concert.ID = Ticket.Concert_ID AND ArtistFName = ? AND ArtistLName = ?";

            prepareState = conn.prepareStatement(sql);
            prepareState.setString(1,this.artistFirst);
            prepareState.setString(2,this.artistLast);
            
            result = prepareState.executeQuery();
            ResultSetMetaData ticketData = result.getMetaData();
            
            b = ticketData.getColumnCount();
            DefaultTableModel ticketTable = (DefaultTableModel)ticketTableList.getModel();
            ticketTable.setRowCount(0);
            
            while(result.next()){
                Vector ticketList = new Vector();
                
                for(int i = 1; i < b; i++){
                    ticketList.add(result.getInt("SeatNum"));
                    ticketList.add(result.getInt("Price"));
                }
                ticketTable.addRow(ticketList);
            }        
        } catch (SQLException ex) {
            Logger.getLogger(ConcertApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void clearTicketTable(){
        ticketTableList.setModel(new DefaultTableModel(null, new String[]{"SeatNum", "Price"}));
    }
    
    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        //Buy Ticket Button
        ConcertTicket ticketResult = new ConcertTicket(id, artistFirst, artistLast, date, address, seatNumber, seatPrice);
       ticketResult.setVisible(true); 
       
    }//GEN-LAST:event_buyButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // Refresh Button
        updateTable();
        clearTicketTable();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void concertTableListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_concertTableListMouseClicked
        // Click on a row of Concert Table
        DefaultTableModel concertTable = (DefaultTableModel)concertTableList.getModel();
        int indexOfRow = concertTableList.getSelectedRow();
        
        this.id = (int) concertTable.getValueAt(indexOfRow,0);
        this.artistFirst = concertTable.getValueAt(indexOfRow,1).toString();
        this.artistLast = concertTable.getValueAt(indexOfRow,2).toString();
        this.date = concertTable.getValueAt(indexOfRow,3).toString();
        this.address = concertTable.getValueAt(indexOfRow,4).toString();
        
        listTickets();
    }//GEN-LAST:event_concertTableListMouseClicked

    private void ticketTableListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ticketTableListMouseClicked
        // Ticket Table, clicking a row
        DefaultTableModel ticketTable = (DefaultTableModel)ticketTableList.getModel();
        int indexOfRow = ticketTableList.getSelectedRow();
        
        this.seatNumber = (int) ticketTable.getValueAt(indexOfRow,0);
        this.seatPrice = (int) ticketTable.getValueAt(indexOfRow,1);
        
        buyButton.setVisible(true);
    }//GEN-LAST:event_ticketTableListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConcertApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConcertApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConcertApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConcertApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConcertApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyButton;
    private javax.swing.JPanel concertPanel;
    private javax.swing.JTable concertTableList;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLayeredPane ticketPanel;
    private javax.swing.JTable ticketTableList;
    // End of variables declaration//GEN-END:variables
}
